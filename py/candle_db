#!/usr/bin/env python

# CANDLE DB

from __future__ import print_function

import argparse

import pysolr

hostport = "localhost:8983"
url_template = "http://%s/solr/%s"
solr = None

def abort(msg):
    print("candle_db: " + msg)
    sys.exit(1)

def set_url(core):
    """Setup a Solr instance. The timeout is optional."""
    global solr
    if not (core == "run" or core == "experiment"):
        abort("unknown core name: %s", core)
    solr = pysolr.Solr(url_template % (hostport, core), timeout=10)

def update_run(run_id, parameters,
               benchmark_id  = "unknown",
               dataset_id    = "unknown",
               experiment_id = "unknown",
               start_time    = None,
               end_time      = None,
               runtime_hours = None,
               status        = "SUCCESS",
               run_progress  = None,
               training_accuracy = None,
               training_loss = None,
               validation_accuracy = None,
               validation_loss = None,
               model_checkpoint_file = None,
               model_description_file = None,
               model_weight_file = None,
               model_result_files = None):
    update_run_kv([
        {
            "run_id": run_id,
            "parameters": parameters,
            "benchmark_id": benchmark_id,
            "experiment_id": experiment_id
        }])

def experiment_insert(experiment_id,
                      benchmark_id  = "unknown",
                      dataset_id    = "unknown",
                      experiment_title = "untitled",
                      description = "_blank",
                      optimization_package_name = "unknown",
                      optimization_package_version = "unknown",
                      objective_function = "unknown",
                      search_space = "unknown",
                      search_strategy = "unknown",
                      max_runs = "unknown",
                      status = None,
                      start_time = None,
                      end_time = None,
                      system_description = "unknown",
                      keys = None):
    set_url("experiment")
    D = {
            "experiment_id": experiment_id,
            "benchmark_id": benchmark_id,
            "experiment_title": experiment_title
        }
    if keys != None: D.update(kv2dict(keys))

    solr.add([ D ])


def params2string(N1, NE):
    return "N1=%i,NE=%i" % (N1, NE)

def kv2dict(L):
    """ Convert list L of [ K=V... ] to dict { K:V ... } """
    result = {}
    for kv in L:
        print(kv)
        tokens = kv.split('=')
        key = tokens[0]
        if len(tokens) == 1:
            result[key] = ""
        else:
            value = tokens[1]
            result[key] = value
    return result

def update(remainder):
    if len(remainder) < 1:
        abort("update: requires core name!")
    db = remainder[0]
    set_url(db)
    kv = kv2dict(remainder[1:])
    if db == "run":
        update_run_kv(kv)

def update_run_kv(kv):
    solr.add([kv])

def query(args):
    if len(args) < 1:
        abort("query: requires core name!")
    db = args[0]
    set_url(db)
    q = "*:*" # Default
    if len(args) == 2:
        q = args[1]
    # Return up to 1B results (default is 10):
    results = solr.search(q=q, rows=1000*1000*1000)
    return results

def query_print(args):
    results = query(args)
    print("results: " + str(len(results.docs)))
    for result in results:
        print("----")
        print_result(result)

def print_result(result):
    copy = result.copy()
    del copy["_version_"]
    print_table(copy)

def print_table(D):
    K = D.keys()
    K.sort()
    n = max(map(len, K)) # Length of longest key
    for (k,v) in D.iteritems():
        print("%*s = %s" % (-n, k, v))

def delete(args):
    if len(args) != 1:
        abort("delete: requires core name!")
    db = args[0]
    set_url(db)
    solr.delete(q="*:*")

def ls(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--no-count', default=False, action='store_true')
    parser.add_argument("remainder", nargs="*")
    ns = parser.parse_args(args)
    if len(ns.remainder) < 1:
        abort("ls: requires core name!")
    db = ns.remainder[0]
    results = query(ns.remainder)
    if not ns.no_count:
        print("results: " + str(len(results.docs)))
    if db == "experiment":
        ls_experiment(ns.remainder[1:], results)
    elif db == "run":
        ls_run(ns.remainder[1:], results)

def ls_experiment(args, results):
    for result in results:
        print(result["experiment_id"])

def ls_run(args, results):
    table = {}
    for result in results:
        parameters = result["parameters"][0]
        table[result["run_id"]] = parameters
    print_table(table)

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Requires: subcommand arguments...")
        sys.exit(1)

    subcommand = sys.argv[1]
    remainder  = sys.argv[2:]
    if subcommand == "delete":
        delete(remainder)
    elif subcommand == "update":
        update(remainder)
    elif subcommand == "query":
        query_print(remainder)
    elif subcommand == "ls":
        ls(remainder)
    else:
        abort("unknown subcommand: " + subcommand)
